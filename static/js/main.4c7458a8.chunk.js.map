{"version":3,"sources":["App.js","use-viewport-width.js","index.js"],"names":["App","viewportWidth","useRef","useEffect","updateViewportWidth","current","window","innerWidth","addEventListener","useViewportWidth","activeHalf","setActiveHalf","useState","onViewportBoxUpdate","_ref","x","halfViewport","min","max","react_default","a","createElement","framer_motion_es","className","Zone","color","isSelected","_ref2","div","layoutId","initial","animate","backgroundColor","drag","dragConstraints","top","left","right","bottom","dragElastic","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"sKAce,SAASA,IACtB,MAAMC,ECbD,WACL,MAAMA,EAAgBC,iBAAO,GAY7B,OAVAC,oBAAU,KACR,MAAMC,EAAsB,KAC1BH,EAAcI,QAAUC,OAAOC,YAGjCH,IAEAE,OAAOE,iBAAiB,SAAUJ,IACjC,IAEIH,EDAeQ,IACfC,EAAYC,GAAiBC,mBAAS,KAEvCC,EAAsBC,IAAW,IAAVC,EAAEA,GAAQD,EACrC,MAAME,EAAef,EAAcI,QAAU,EAE1B,MAAfK,GAAsBK,EAAEE,IAAMD,EAChCL,EAAc,KACU,MAAfD,GAAsBK,EAAEG,IAAMF,GACvCL,EAAc,MAIlB,OACEQ,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAACG,EAAD,CACEC,MAAM,UACNC,WAA2B,MAAfhB,EACZG,oBAAqBA,IAEvBM,EAAAC,EAAAC,cAACG,EAAD,CACEC,MAAM,UACNC,WAA2B,MAAfhB,EACZG,oBAAqBA,MAO/B,SAASW,EAATG,GAA0D,IAA5CF,MAAEA,EAAFC,WAASA,EAATb,oBAAqBA,GAAuBc,EACxD,OACER,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kBACbJ,EAAAC,EAAAC,cAACC,EAAA,EAAOM,IAAR,CAAYL,UAAU,YACrBG,GACCP,EAAAC,EAAAC,cAACC,EAAA,EAAOM,IAAR,CACEL,UAAU,MACVM,SAAS,MACTC,SAAS,EACTC,QAAS,CAAEC,gBAAiBP,GAC5BQ,MAAI,EAEJC,gBAAiB,CAAEC,IAAK,EAAGC,KAAM,EAAGC,MAAO,EAAGC,OAAQ,GAEtDC,YAAa,EACb1B,oBAAqBA,KExD/B,MAAM2B,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACPzB,EAAAC,EAAAC,cAACF,EAAAC,EAAMyB,WAAP,KACE1B,EAAAC,EAAAC,cAACrB,EAAD,OAEFwC","file":"static/js/main.4c7458a8.chunk.js","sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nimport { motion, AnimateSharedLayout } from \"framer-motion\";\nimport { useViewportWidth } from \"./use-viewport-width\";\nimport \"./styles.css\";\n\n/**\n * This is an example of a shared drag gesture in Framer Motion 2.\n *\n * When the box is dragged from one half to the other, it gets\n * removed from one component and added in the other. This isn't\n * the same box - it is two seperate components that share a layoutId.\n */\n\nexport default function App() {\n  const viewportWidth = useViewportWidth();\n  const [activeHalf, setActiveHalf] = useState(\"a\");\n\n  const onViewportBoxUpdate = ({ x }) => {\n    const halfViewport = viewportWidth.current / 2;\n\n    if (activeHalf === \"a\" && x.min > halfViewport) {\n      setActiveHalf(\"b\");\n    } else if (activeHalf === \"b\" && x.max < halfViewport) {\n      setActiveHalf(\"a\");\n    }\n  };\n\n  return (\n    <AnimateSharedLayout>\n      <div className=\"container\">\n        <Zone\n          color=\"#f107a3\"\n          isSelected={activeHalf === \"a\"}\n          onViewportBoxUpdate={onViewportBoxUpdate}\n        />\n        <Zone\n          color=\"#7b2ff7\"\n          isSelected={activeHalf === \"b\"}\n          onViewportBoxUpdate={onViewportBoxUpdate}\n        />\n      </div>\n    </AnimateSharedLayout>\n  );\n}\n\nfunction Zone({ color, isSelected, onViewportBoxUpdate }) {\n  return (\n    <div className=\"half-container\">\n      <motion.div className=\"overlay\" />\n      {isSelected && (\n        <motion.div\n          className=\"box\"\n          layoutId=\"box\"\n          initial={false}\n          animate={{ backgroundColor: color }}\n          drag\n          // Snap the box back to its center when we let go\n          dragConstraints={{ top: 0, left: 0, right: 0, bottom: 0 }}\n          // Allow full movememnt outside constraints\n          dragElastic={1}\n          onViewportBoxUpdate={onViewportBoxUpdate}\n        />\n      )}\n    </div>\n  );\n}\n","import { useEffect, useRef } from \"react\";\n\nexport function useViewportWidth() {\n  const viewportWidth = useRef(0);\n\n  useEffect(() => {\n    const updateViewportWidth = () => {\n      viewportWidth.current = window.innerWidth;\n    };\n\n    updateViewportWidth();\n\n    window.addEventListener(\"resize\", updateViewportWidth);\n  }, []);\n\n  return viewportWidth;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}